용어 정리ver0.1

스프링 각 부분별  용어 정리
1 컨트롤러는 보통 컨트롤러로 통일
2. dao = repository
3. service = command
4. domain = dto = vo = entity
vo는 보통 리드온리 객체 많이 사용한다.


ERP(Enterprise Resource Planning 전사적 자원 관리)
ERP는 경영 정보 시스템의 한 종류이다. 전사적 자원 관리는 회사의 모든 정보 뿐만 아니라,
공급 사슬 관리, 고객의 주문정보까지 포함하여 통합적으로 관리하는 시스템이다.
경영, 인사, 재무, 생산 등 기업의 전반적 시스템을 하나로 통합하므로써
효율성을 극대회하는 경영 전략이다

RPA (Robotic Process Automation) - 로보틱 처리 자동화
사람이 수행하던 규칙적이고 반복적인 업무 프로세스를 소프트웨어 로봇을 적용하여
자동화하는 것을 말한다. 저렴한 비용으로 빠르고 정확하게 업무를 수행하는 디지털 
노동을 일컫는다.
RPA는 사람이 구축된 시스템을 이용하듯 로봇이 사람과 똑같이 일을 하도록 만들어져
있으므로 기존 시스템의 깊은 곳은 건드리지 않는다. 기존 시스템을 크게 변경하지 
않아도 된다는 의미다.
짧은 시간안에 개발 및 적용이 가능하고 다양한 형태의 업무 확장, 적용이 용이하다.
실제로 RPA도입 후 많은 기업들이 투자대비 성과를 입증했다.
입력오류 예방하고 문제를 최소화하며, 무인 사무처리 능력으로
연중무휴로 신속하게 작업 수행이 가능하다.
현재 적용 대상 업무 - 인사, 재무회계, 구매, 고객서비스 등의 분야에서 
급여, 근태관리, 인보이스와 세금계산서 발행, 주문관리, 고객 문의 대응, 주문서 
생성처리 등의 업무에서 가장 많이 적용되고 있다.


어노테이션(Annotation)
자바에서의 어노테이션은 코드 사이에 주석처럼 쓰여서 
특별한 의미, 기능을 수행하도록 하는 기술이다. 
프로그램에 추가적인 정보를 제공해주는 메타데이터(데이터를 위한 데이터)라고 볼 수 있다.

	어노테이션의 용도
	1. 컴파일러에게 코드 작성 문법 에러를 체크하도록 정보를 제공
	2. 소프트웨어 개발툴이 빌드나 배치시 코드를 자동으로 생성할 수 있도록 정보 제공
	3. 실행 시 특정 기능을 실행하도록 정보 제공

	기본적인 어노테이션 사용 순서
	1. 어노테이션의 정의
	2. 클래스에 어노테이션을 배치
	3. 코드가 실행되는 중에 Reflection을 이용하여 추가정보를 획득하여 기능 실시

영속성 컨텍스트 (persistence context)
- 엔티티 매니저로 엔티티를 저장하거나 조회하면 엔티티 매니저는
영속성 컨텍스트에 엔티티를 보관하고 관리한다.
- 엔티티 매니저를 생성할 때 하나 만들어진다.
- 엔티티 매니저를 통해 영속성 컨텍스트에 접근할 수 있고,
영속성 컨텍스트를 관리할 수 있다.
- 트랜잭션을 커밋하는 순간 영속성 컨택스트에 새로 저장된 
엔티티를 DB에 반영한다. ==.flush()
- 영속 상태의 엔티티는 모두 영속성 컨텍스트의 
내부 캐시(1차 캐시)에 저장한다. 
-애플리케이션과 데이터베이스 사이에서 객체를 보관하는 
가상의 데이터베이스와 같은 역할을 맡고 있다.
- 조회한 엔티티만 영속적 컨텍스트가 관리한다.
(임베디드 타입, 단순 필드는 해당 아님)

임베디드 / 임베디드 시스템 

기본적으로 '내장된' 이라는 의미를 갖고 있는 단어
어떤 기계안에 '제어'를 목적으로 하는 작은 컴퓨터가 
달려있다면 이를 임베디드 시스템이라고 할 수 있다.
논리, 기준을 가진 기계는 임베디드 시스템을 모두 
가지고 있다고 할 수 있다. 
기계적 구조 처리를 하지 않고 임베디드 시스템을 
삽입하는 것이 전체적인 구조를 단순하게 하여
기계가 덜 고장나게 하는 효과도 있다.
임베디드에 해당하는 부분은 스스로가 주인공이 아닌
기계를 위해 도움을 주는 쩌리라고 생각하면 된다.
결론 - 기계의 다른 부분을 위해 일하는 모든 컴퓨터

데이터베이스 정규화(Normalization)
관계형 데이터베이스의 설계에서 중복을 최소화하게 데이터를 구조화하는 
프로세스를 정규화라고 한다. 
데이터베이스 정규화의 목표는 이상이 있는 관계를 재구성하여 
작고 잘 조직된 관계를 생성하는 것에 있다.
일반적으로 정규화란 크고, 제대로 조직되지 않은 테이블들과 관계들을
작고 잘 조직된 테이블과 관계들로 나누는 것을 포함한다.
정규화의 목적은 하나의 테이블에서의 데이터의 삽입, 삭제, 변경이
정의된 관계들로 인하여 데이터베이스의 나머지 부분들로 전파되게 하는 것이다.
	
	정규화의 목적
	- 데이터베이스의 변경시 이상 현상 제거(갱신이상/삽입이상/삭제이상)
	- 데이터베이스 구조 확장시 재 디자인 최소화
	- 사용자에게 데이터 모델을 더욱 의미있게
	- 다양한 질의 지원

	DB 정규화에 대해 잘 설명이 된 페이지
https://ko.wikipedia.org/wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4_%EC%A0%95%EA%B7%9C%ED%99%94	


REST API (REpresentational State Transfer=REST)
API 또는 애플리케이션 프로그래밍 인터페이스는 애플리케이션이나 디바이스가
서로간에 연결하여 통신할 수 있는 방법을 정의하는 규칙 세트이다.
- 서로 연결 하는 규칙을 정해놓은 것이다.


CRUD(씨.알.유.디.)
CRUD는 대부분의 컴퓨터 소프트웨어가 가지는 기본적인 데이터 처리 기능인 
Create(생성), Read(읽기), Update(갱신), Delete(삭제)를 묶어서 일컫는 말이다. 
사용자 인터페이스가 갖추어야 할 기능(정보의 참조/검색/갱신)을 
가리키는 용어로서도 사용된다.


schema(스키마)
컴퓨터 과학에서 데이터베이스 스키마는 데이터베이스에서 자료의 구조, 자료의 표현 방법,
자료 간의 관계를 형식 언어로 정의한 구조이다. DBMS가 주어진 설정에 따라
데이터베이스 스키마를 생성하며, 데이터베이스 사용자가 자료를 저장, 조회, 삭제, 변경할
때 DBMS는 자신이 생성한 데이터베이스 스키마를 참조하여 명령을 수행한다. 스키마는
3층 구조로 되어있다.
외부스키마 : 프로그래머나 사용자의 입장에서 데이터베이스의 모습으로 조직의 일부분을
정의한 것
개념 스키마 : 모든 응용 시스템과 사용자들이 필요로하는 데이터를 통합한 조직 전체의
데이터베이스 구조를 논리적으로 정의한 것
내부 스키마 : 전체 데이터베이스의 물리적 저장 형태를 기술하는 것

스레싱(Thrashing)
여러 프로그램을 한 번에 실행하면 하드디스크와의 입출력이 계속되어 
프로그램이 정지한 것 같은 현상이 발생할 수 있다.
이처럼 하드디스크의 입출력이 너무 많아져 잦은 페이지 부재로 
CPU Utilization이 급격히 저하되는 현상을 스레싱이라고 한다.

Session(세션)
일정 시간동안 같은 브라우저로 부터 들어오는 일련의 요구를 하나의 상태로 보고
그 상태를 일정하게 유지시키는 기술이다. 방문자의 요청에 따른 정보를 방문자 
메모리에 저장하는 것이 아닌 웹 서버가 세션 아이디 파일을 만들어 
서비스가 돌아가고 있는 서버에 저장하는 것이다. 
서버에 저장되기 때문에 사용자 정보가 노출되지 않는다.


sort  [JavaScript기준 설명]
소트는 배열의 값을 정렬할 때 사용한다. 따라서 어떤 값들을 특정 순서에 따라서
정렬을 할 필요가 있을 때 사용할 수 있다. 예를 들어 사용자들의 이름을 순서대로
나열해야할 때 사용할 수 있다. 
.sort() 형태로 쓰며 인자를 쓰지 않으면 유니코드 순서로 나열된다. 
인자로는 함수가 오게된다.
var fruit = ['cherries','apples','bananas'];
fruit.sort();  -->['apples','bananas','cherries']
-----------------------------
var scores = [1, 10, 21, 2]; 
scores.sort(); // [1, 10, 2, 21] 숫자도 유니코드 순서로 정렬
-------------------------
fruits.sort(compareFunction); 이런식으로 함수를 넣어서 사용한다.


ORM(Object Relational Mapping)
객체와 관계형 데이터베이스의 데이터를 자동으로 연결(매핑)해주는 것을 말한다.
객체 지향 프로그래밍은 클래스를 사용하고, 
관계형 DB는 테이블을 사용한다. 
그래서 객체 모델과 관계형 모델 간에 불일치가 존재한다.
ORM을 통해 객체 간 관계를 바탕으로 SQL을 자동으로 생성하여
불일치를 해결한다.
데이터베이스 데이터 ---매핑--- object필드
객체를 통해 간접적으로 데이터베이스 데이터를 다룬다.



Web(웹)
World Wide Web의 준말로서, 문자 영상 음성 등이 혼합된 멀티미디어 정보를
마치 거미줄과 같은 통신망으로 세계 각지에 연결시켜주는 서비스를 말한다.
웹은 브라우저라는 프로그램을 통하여 동작한다.
즉, 인터넷에서 정보를 이용하기 위해서는 브라우저라는 프로그램이 필요하고
브라우저는 서버에 필요 정보를 요청하여 정보를 받아오는데, 이 때 사용하는
통신 방식이 Http이며, Http 응용 프로그램으로 os에 따라 ASP,PHP,JSP등을 사용한다.


컨테이너
특정 객테의 생성과 관리를 담당하며 객체 운영에 필요한 다양한 기능을 제공.
Servlet 컨테이너, EJB컨테이너(엔터프라이즈 자바빈)가 대표적이다.


컨텍스트(context)
같은 웹 응용프로그램에 소속된 서블릿과 JSP 프로그램들은 공통된 실행환경을 공유함.
이러한 환경을 Context라 함. 이것을 통해 같은 웹응용프로그램 소속 서블릿과 JSP는
서로 데이터를 교환함.

	Servlet Context
	- 클래스는 톰캣 컨테이너 실행시에 각 컨텍스트(웹 어플리케이션)마다 
	하나의 Servlet Context 객체를 생성한다.
	- 톰캣 컨테이너가 종료될 시 해당 객체도 소멸한다.	

트랜잭션(Transaction)
데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위
또는 한꺼번에 모두 수행되어야 할 일련의 연산.
예시로 은행의 계좌이체를 생각해본다.
A계좌에서 B계좌로 이체할 때, A계좌에서 잔고가 차감되고 B계좌에선 증가되어야한다.
중간에 알 수 없는 오류 발생으로 A계좌에서 잔고가 차감되었으나 B계좌에는 
증가되지 않는 경우가 발생하면 안될 것이다.  거래 도중에 오류가 발생한다면
이 거래를 처음부터 없었던 거래로 완전히 되돌리게 된다.
A잔고 차감 - B잔고 증가 를 쪼갤 수 없는 하나의 트랜잭션으로 볼 수 있는 것.
	부분 작업 여러개가 모인 트랜잭션을 처리하기 위하여 
	데이터베이스는 다음의 두 가지 명령어를 활용한다.
	- 커밋 : 모든 부분 작업이 정상적으로 완료되면 변경사항을 한꺼번에
	          DB에 반영한다.
	- 롤백 : 부분 작업이 실패하면 트랜잭션 실행 전으로 되돌린다.
	- savepoint : 작업 전체를 취소하지 않고 정해진 부분까지만 되돌린다.
                             특정 부분에서 트랜잭션을 취소시킬 수 있다.

트랜잭션의 연산과정
		-성공-> 부분완료-(커밋)->완료
       활성(Active)
		-오류->실패       -(롤백)->철회


프레임워크(frame work)
프레임워크는 어떠한 목적을 달성하기 위해 복잡하게 얽혀있는 문제를 해결하기 위한 구조며,
소프트웨어 개발에 있어 하나의 뼈대 역할을 한다.

	[참고] 라이브러리와 프레임워크의 차이
 	라이브러리와 프레임워크를 헷갈리는 경우도 있는데, 보통 프레임워크라고 하면
	클래스와 라이브러리가 합쳐진 형태라고 볼 수 있다.
	메소드 및 클래스화, 즉 모듈화를 하는 이유 중 하나가 재사용성인데, 
	프레임워크는 이 재사용성을 큰 그룹 단위로 묶어주었다고 보면 된다.
	재사용 가능한 수많은 클래스들과 라이브러리들을 융합한 채로 처음부터 제공해
	주기 때문에, 여러 개의 표준을 만들지 않아도 돼서 개발자의 피곤함을 덜어준다.

	어플리케이션 프레임워크
	- 프로그래밍에서 특정 운영체제를 위한 응용프로그램 표준구조를 구현하는 
	클래스와 라이브러리 모임 
	   ->어떤 운영체제를 위해 '표준구조'라는 것을 만들었고 그것을 구현하기 위해 
	   클래스와 라이브러리를 모아 놓은 것이다.


함수 

함수명(매개변수,파라미터,인수){실행부} <-이와 같은 모양으로 선언
선언 이후에는 함수명()만으로 불러서 사용 가능하다.

함수명 없이 function(){} 과 같이 익명함수로 활용도 가능하다.
또한 이러한 익명함수는 변수에 할당하여 많이 사용한다.
var add = function(a,b){
 return a +b ;
}
와 같이 사용할 수 있음

물론 함수는 다른 함수의 매개변수로도 쓰일 수 있음

function(add(10,20),20)-> add(10,20)이 계산된 이후에 나머지 20을 계산하여 결과값을 구한다.

스코프 -> 변수를 선언하고 사용할 때 변수가 적용되는 범위

지역변수 전역변수
함수 내에서 var를 이용하여 선언 ->지역변수
함수 밖에서 var를 이용하여 선언 ->전역변수
함수 내에서 var를 이용하지 않고 선언 -> 전역변수

이벤트(event)란?
웹브라우저나 사용자가 행하는 동작, 웹 요소를 클릭하거나 마우스가 이동하는 등의 행위를 말함
사용자가 웹 문서 영역을 벗어나 하는 동작은 이벤트가 아니다.

--
$대상.on("이벤트이름","이벤트리스너");
            어떠한 이벤트가 발생시 리스너가 감지하고 특정 행위를 하도록 한다.

$()은 jQuery를 이용하여 특정 대상을 불러오는것 

$(document).ready(function(){
   //도큐먼트가 준비가 되면 함수를 실행해라	
	$("#btnCheck").on("click",function(){
	//id=btnCheck인 곳이 눌리면 함수를 실행한다.
		alert("환영합니다.");
		//해당 함수가 실행되면 환영합니다를 띄운다.

	});
	또는
	$("btnCheck").click(function(){
	//btnCheck가 눌리면 함수를 실행한다.
		alert("환영합니다.");
		//함수가 실행되면 환영합니다를 띄운다.
	});
})

-------------콜백 함수에 대한 설명----------
$(document).ready(function(){	
	$("btnCheck").click(function(){
		alert("환영합니다.");
	});
})


btnCheck가 클릭 되기 전에는 아무 행위가 이뤄지지 않는다.
클릭, 레디와 같이 조건이 충족되어야 실행되는 함수를
콜백 함수라고 한다.
===============================================
자바스크립트 var const let에 대하여(변수 선언 방식)

var의 문제점 변수의 값이 덮어 씌워진다. 
간단한 테스트에서는 편리하지만 코드량이 많아진다면
어디에서 어떻게 사용될지 파악하기 어렵고
실수로 값이 바뀌는 경우가 있음
(let과 const는 es6부터 추가 됨)

let과 const는 둘 다 재 선언이 되지 않는다 
차이점은?
 
let은 재할당이 가능하다

let name = 'good'
console.log(name) // good

let name = 'bad'
console.log(name) // Uncaught SyntaxError: Identifier 'name' has alerady been declared
자바의 객체처럼 다시 선언하는것은 불가능함

name = 'soso' 
console.log(name) // soso
그러나 해당객체에 재할당하는 것은 가능함

const는 변수 재선언 및 재할당이 모두 불가능하다.
================================================
정규 표현식
정규 표현식 이란 일정한 패턴을 가진 문자열의 집합을 표현하기 위해
사용하는 형식언어이다.

이는 자바스크립트의 고유 문법이 아니고, 대부분 프로그램 언어와
코드 에디터에 내장되어 있다.
-----------------
정규 표현식의 역할
정규 표현식은 문자열을 대상으로 패턴 매칭 기능을 제공함

패턴 매칭 기능이란 특정 패턴과 일치하는 문자열을 검색, 추출, 치환 할 수 있는 기능

반복문과 조건문 없이 패턴을 가진 문자열을 간단하게 검색, 추출, 치환 할 수 있다

간단한 문자검색 부터 이메일, 유효성 검사 등의 복잡한 문자 일치 기능 등을
빠르게 수행 가능함

-> 요약 크게 3가지 역할을 수행
1. 문자검색 2. 문자 추출 3. 문자 대체
---------------------

정규 표현식은 / 로 감싸인 패턴을 리터럴로 사용한다.
패턴은 /로 열고 닫으며, 문자열의 따옴표는 생략

리터럴이란 변수에 넣는 변하지 않는 데이터를 의미한다.(상수와는 다름)
/로 시작 /로 끝나는 식을 리터럴이라고 하고 그러한 표현을
정규 표현식이라고 함
사용방법1(변수 선언)
const regexp1 = /^abc/; 패턴 을 객체에 저장함 정규 표현식 객체의 생성
방법2(생성자 호출)
const regexp1 = new RegExp(/^abc/i); 생성자 함수를 호출하여 객체를 생성
방법3(재할당) 
let regexp1 = /ipsum/g;
regexp1 = /lorem/i; //<- 재할당 됨
console.log(regexp1); // /lorem/i 출력 됨
주의 const를 이용하여 변수를 상수로 선언하면 재할당이 안됨

기본적인 패턴 표

^ 줄의 시작에서 일치  /^abc/
$ 줄의 끝에서 일치 /abc$/
{3} 3(숫자)개 연속 일치
{3,} 3개 이상 연속 일치
{3,5} 3개 이상 5개 이하(3~5) 연속 일치
{3,5}? 3개 이상 5개 이하(3~5) 연속 중 적은 3개 연속 일치
[abc] a 또는 b 또는 c와 일치 .이나 * 같은 특문은 []안에서 특문이 아님
[a-z] a부터 z사이의 문자 구간에서 일치(영어 소문자)
[0-9] 0부터 9 사이의 문자 구간에서 일치(숫자)
[가-힣] 가부터 힣 사이의 문자 구간에 일치(한글)
[^abc] a 또는 b 또는 c가 아닌 나머지 문자에 일치(부정)
-----------------------------
플래그(flag)
정규 표현식의 옵션으로 검색 방식을 설정하기 위해 사용함
원하는 문자 검색 결과를 반환하도록 할 수 있음.

기본적인 플래그
g
모든 문자를 검색하겠다. 모든 검색 결과를 배열로 반환한다.
i
영어 대소문자를 구분하지 않겠다 모든 검색 결과를 배열로 반환한다.
m
문자열의 행이 바뀌더라도 패턴 검색을 계속한다.
u
유니코드 문자를 처리하기 위해 필요하다.





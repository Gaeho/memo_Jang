스프링 부트 JPA 세팅 사항 정리

1. 컨트롤러 

@Controller - Class위에 달아준다. 
컨포넌트화 하여 메모리에 띄워준다.
여기가 컨트롤러 역할을 한다는 것을 컨테이너에 알린다.

@Autowired - 컨트롤러 생성자 위에 달아준다.
빈으로 생성된 객체가 찾아 올 수 있도록 이어준다. 

@GetMapping("/uri") - 메서드 위에 달아준다. 
""안에 들어간 uri가 입력되면 해당 메서드가 실행된다.(핸들러맵핑)
해당 메서드는 게터 방식으로 받아서 일을 처리하기 때문에 
주는 쪽에서 포스트 방식으로 날리면 오류가 난다.
get방식은 주로 입력 시에 많이 사용한다.


@PostMapping("/uri")
포스트 방식으로 날린 정보를 받아서 처리한다.
주는 쪽에서 겟 방식으로 날리면 오류가 난다.
post방식은 주로 출력? 시에 많이 사용한다.


2. 도메인
lombok - Java 라이브러리로 반복되는 getter, setter, toString .. 등의
 반복 메서드 작성 코드를 줄여주는 코드 다이어트 라이브러리 이다.
	@getter 게터를 만들지 않아도 필드 값을 겟터로 소환
	@setter 세터를 만들지 않아도 필드에 값 입력 가능
	@toString 클래스 위에 붙이면 변수에 저장된 값이
		콘솔로 출력된다.
   jpa 연관 어노테이션
@Entity - class 위에 선언한다. 해당 클래스를 jpa로 하여금
엔티티화 할 대상으로 인식하도록 한다. 
@Table(name="") - class 위에 선언한다. 
엔티티를 만들 때 name에 적은 문자열이 테이블 명이 된다.
@ID - 객체 선언부 위에 적는다. 
해당객체는 엔티티 생성 시에 PK가 된다.
@Column(name="") - 객체 선언부 위에 적는다.
엔티티 만들어질 때 해당 도메인의 이름이 된다.(=속성이름)
@SequenceGenerator(name=""            <-시퀀스 생성기 이름
 		sequenceName=""    <- DB에 생성해둔 시퀀스 이름
				        이것이 있어야 테이블마다 시퀀스 오브젝트 관리 가능	
		initialValue = 숫자,     <-시퀀스 시작값
		allocationSize=숫자)   <- 메모리를 통해 할당할 범위 사이즈
                                                            기본값50이고, 1로 설정시 매번 insert마다
				          DB의 시퀀스 호출함

@GeneratedValue(strategy=GenerationType.SEQUENCE,  <사용할 전략을 시퀀스로 선택
		generator="USER_SEQ_GEN" <식별자 생성기를 설정해 놓은 USER_SEQ_GEN으로 설정


3. 레포지토리
@Repository - class위에 선언한다.
해당 클래스가 레포지토리임을 알린다. 그리고 컴포넌트화하여
메모리에 띄운다.



4. 서비스 
@Service - class위에 선언한다. 컴포넌트화 되어 빈 처럼 사용됨
이곳이 서비스 단임을 알린다. 

@Transactional
 begin, commit을 자동으로 수행해주며, 예외 발생시 자동으로 rollback해줌
참고- https://mommoo.tistory.com/92

5. 템플릿

6. 프로퍼티스
server.port=포트번호

#Oracle Connect
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521/xe
spring.datasource.username=scott
spring.datasource.password=tiger
 - db커넥트 정보 저장

# JPA SQL Show   - jpa사용시 지정 
spring.jpa.show-sql=true  < 쿼리문을 콘솔출력?
spring.jpa.hibernate.ddl-auto=none <자동으로 ddl할까? - 아니 or Create해 
create 선택시 지정된 도메인 과 같은 이름을 가진 테이블은 drop되고 
들어오는 정보를 바탕으로 새로 테이블을 만든다. 사용시 매우 주의 요함


7. 스테틱
index.html ->기본페이지가 없을 때, 모종의 문제로 이용 불가능할 때
출력하는 페이지이다. 

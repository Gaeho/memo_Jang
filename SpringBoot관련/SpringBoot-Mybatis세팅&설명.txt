Spring boot + Mybatis 설정사항 정리

src/main/resources 세팅사항

mappers - sql문을 포함하고 있는 모델의 xml파일들이 위치한다.(Emp.xml등)
	dao에서 기술된 id를 야물에 기술된 mapper 위치에
	있는 xml중에서 동일한 id를 찾아서  
	해당되는 내용으로 세션이 트랜잭션을 수행한다고 함
	mapper 기본 설정 정보(최상단<!DOCTYPE>안의 정보)는
	mybatis.org에서 얻을 수 있다. 검색창에 doctpye을 넣어보자


application.yml 일명 야물파일 - 파이썬 처럼 줄바꿈과 띄어쓰기로 계층을 나눔
	
	수업 중 야물 파일을 이용하여 설정하는 사항
	1. 포트번호
	2. datasource정보 url/username/password/driverclassname
	3. JPA 정보 hibernate: ddl-auto: none <- create로 설정 시 주의 요망
	4. view resolver 설정 prefix와 suffix 설정한다. 접두에 해당하는 위치에 (뷰단)파일이 있어야한다.
	5. mybatis 정보 dto위치 xml위치 mapper위치 지정 

configuration.xml - 경로에 해당하는 정보를 별칭을 사용할 수 있도록 지정한다.
		configuration 기본 설정 정보(최상단<!DOCTYPE>안의 정보)는
		mybatis.org에서 얻을 수 있다. 검색창에 doctpye을 넣어보자


뷰단에 관련된 파일 구조는 이전의 JSP프로젝트와 동일한 구조로 작성한다.
src 
  - main 
      - webapp(여기까지 디폴트) 
	- WEB-INF  index.jsp(시작페이지)
	   - lib  ojdbc6.jar(데이터연결정보) 
	   - view  jsp 파일들 위치  

pom.xml은 프로젝트 바로 하위 단계에 위치함 
예를 들면 C:\Spring\SpringSrc\sBootMybatis03\pom.xml 이런식
sBootMybatis03의 바로 아래 경로에 pom.xml이 위치한다.




src/main/java 셋팅사항(패키지 구조 )
com.oracle.sBootMybatis03 - 기본 컨텍스트 루트

com.oracle.sBootMybatis03.configuration - SpringConfig.java
환경설정파일 위치한다 톰캣 컨테이너가 구동되면서 초기화 될 때 
가장 먼저 실행되어 bean화 되어 메모리 상에 떠 있게 된다.
여기에서는 jdbc에 사용되는 dataSource와 JPA에 사용되는 EntityManager를
Bean으로 만들어서 메모리에 띄운다. (언제든 사용 가능하도록 미리 준비)

com.oracle.sBootMybatis03.controller - 컨트롤러 
컨테이너들을 여기에 모아둔다. 언제나 출발은 컨트롤러

com.oracle.sBootMybatis03.dao - 다오
인터페이스.java - 구현체.java (다형성 구현)
DB에 접근할 세션에 대해 직접적인 내용을 구술한다. 

com.oracle.sBootMybatis03.domain - 도메인
JPA로 접근할 DTO들이 위치하는 듯 하다(아직 수업 진행x)
아마 여기에 생길 Class들은 Entity역할도 겸할 것이다.

com.oracle.sBootMybatis03.model - DTO
Mybatis로 DB에 접근 할 때 사용하는 DTO들은 여기에 둔다

com.oracle.sBootMybatis03.service - 서비스 
인터페이스.java - 구현체.java (다형성 구현)


----------------------------------Spring Boot의 특징?----------------------------------

컨트롤러에 서비스가 물려있고 서비스에 다오(도메인)이 물려 있다.

컨트롤러의 메소드를 사용하면 그 안에 있는 서비스의 메소드를 이용하여 

서비스로 이동하고 서비스의 메소드 안에 있는 다오의 메소드를 이용하여 

다오에 접근하는 식으로 구조가 이루어져 있다.

이것이 가능한 이유는 하위에 있는 계층의 생성자를 가지고 오기 때문이다.

예를 들면 컨트롤러에는 서비스 클래스의 생성자를 호출하여 

서비스 클래스에서 정의한 사항들을 컨트롤러 클래스에서 이용할 수 있게 되는 것이다.

그런데 한 가지 사항을 더 알아야 한다. 

하위 계층의 생성자를 가지고 올 때 구현체의 인스턴스를 파라메터로서 바인딩 시킨다.

간단하게 말하자면 하위 클래스의 객체를 생성한다고 얘기했지만

속 알맹이는 하위 클래스의 구현체 인스턴스가 들어있는 것이다. 

이것 때문에 서비스와 다오에서 인터페이스와 - 상속(구현)으로 객체를 만드는 것이다.

우리는 이러한 방식을 통해서 쉽게 다오나 서비스의 내용을 변경 할 수 있다.

@Repository @Service와 같은 어노테이션만 바꿔서 달아주기만 하면 

@Autowired를 통하여 서버 컨테이너가 알아서 처리해주는 식이다.

어노테이션은 어떻게 작업이 이루어지는가?

@autowired를 붙여서 이미 생성하여 놓은 적당한 BEAN을 매칭시켜서 사용하도록 한다.

위에서도 말했듯이 @Configuration @Controller @Repository @Service와 같이 

클래스에 어노테이션을 붙이므로써 

해당 클래스가 Bean으로써 언제든 사용될 수 있도록 메모리에 띄워진다.

생성자 주입에서는 그렇게 만들어진 객체가 파라메터로써 제공이되는 것이고

필드 주입에서는 그릇에 담기는 인스턴스로써 제공이 되는 것이다. 


--------------------------------------MyBatis 정리-------------------------------------------
ibatis에서 제공하는 인터페이스 클래스인 SQL세션을 이용하여 DB에 접근한다.

특징 dao에서는 session.selectOne("djEmpTotal"); 과 같이 기술하고 

파라메터로 입력되는 문자열(id)을 yml파일에서 기록한 위치로 가서 

모든 파일 중 일치하는 id가 있는지 찾는다. id="djEmpTotal" 인 것이 있다면

그것의 파라메터 리턴 타입에 맞도록 sql을 실행한다.

configuration.xml에 등록하는 경로 alias는 맵퍼의 클래스를 

단축해서 사용할 수 있도록 해준다. 

이것을 설정하지 않으면 다음과 같다

[사용한 경우]
<select  id="djEmpListAll" parameterType="Emp" resultType="Emp">
	select * from emp order by empno
</select >

[사용하지 않은 경우]
<select  id="djEmpListAll" 
parameterType="com.oracle.sBootMybatis03.model.Emp" 
resultType="com.oracle.sBootMybatis03.model.Emp">
	select * from emp order by empno
</select >

xml은 자동으로 클래스를 연결할 수 없나보다. 
그래서 configuration.xml을 통하여 따로 지정하는 것 같다.

-추가 사항
 # dto Location
  type-aliases-package: com.oracle.sBootMybatis03.model       
  # XML Location
  config-location: classpath:configuration.xml

현재는 둘 다 설정이 되어있는데 
dto 경로를 설정하던지 (1번 방법)
configuration.xml 파일 안에 
Alias설정을 해줘야한다. (2번 방법 - 강사님 추천)

------------------------------------JPA 사용 시 설정 사항--------------------
https://7942yongdae.tistory.com/115 참고



----------------------mapper.xml 세팅 시 주의사항---------------------------
Query에서 조건절 설정할 시에 부등호를 사용할 수 있다. 
그냥 부등호를 사용할 시에는 태그 여닫는 부호와 혼동을하게 되므로
쿼리문을 <![CDATA[ ]]> 사이에 넣는다.

<select  id="djEmpListAll2" parameterType="Emp" resultType="Emp">
	<![CDATA[
		select *
			from(
			select rownum rn, a.*
			from (select * from emp order by empno) a)
			where rn >= #{start} 
			and rn <= #{end}
		  ]]>			
	</select >

이런식으로 작성하면 된다.


참고
https://bloowhale.tistory.com/17?category=936896
